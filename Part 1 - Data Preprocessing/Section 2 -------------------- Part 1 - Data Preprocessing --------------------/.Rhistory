install.getpackages('quantmod')
install.packages('quantmod')
getSymbols('^GSPC', src='yahoo')
install.packages('quantmod')
head(GSPC)
tail(GSPC)
library(forecast)
install.packages('forecast')
install.packages('fpp')
library(fpp)
install.packages('fma')
install.packages("fma")
findBestPrediction <- function(Stockadd)
{
Stock = Stockadd
# In case not read correctly:
backUpStock = read.table("./input/AEE.csv", sep=",", header=TRUE);
# Convert into time series object
tryCatch({   tsStock = ts(rev(Stock$Close),start=c(2000, 1),frequency=12)}, error=function(e) { tsStock = ts(rev(Stock$Close),start=c(2006, 1),frequency=12) })
tryCatch({   tsBackUpStock = ts(rev(backUpStock$Close),start=c(2000, 1),frequency=12)}, error=function(e) { backUpStock = ts(rev(Stock$Close),start=c(2006, 1),frequency=12) })
# Create Train and Test data of the input stock
tryCatch({   train <- window(tsBackUpStock, end=2010)}, error=function(e) { train = 0 })
tryCatch({   test <- window(tsBackUpStock, start=2013)}, error=function(e) { test = 0 })
tryCatch({   Btrain <- window(tsBackUpStock, end=2010)}, error=function(e) { Btrain = 0 })
tryCatch({   Btest <- window(tsBackUpStock, start=2013)}, error=function(e) { Btest = 0 })
tryCatch({   train <- window(tsStock, end=2010)}, error=function(e) { train = 0 })
tryCatch({   test <- window(tsStock, start=2013)}, error=function(e) { test = 0 })
if (test[1] == Btest[1] && test[2] == Btest[2] && test[3] == Btest[3]) {train = Btrain }
# Mean Absolute Errors of the 25 predictions are stored here
tryCatch({ mae = matrix(NA,25,length(test)+1)}, error=function(e) {  mae = matrix(NA,25,10000) })
tl = seq(2000,2013,length=length(train))
tl2 = tl^7
# cat("01")
tryCatch({   polyStock = lm(train ~ tl + tl2)}, error=function(e) { polyStock = 0 })
# cat("02")
tryCatch({   tsStocktrend1=ts(polyStock$fit,start=c(2000, 1),frequency=12)}, error=function(e) { tsStocktrend1 = 0 })
# cat("03")
tryCatch({  stlStock = stl(train,s.window="periodic")}, error=function(e) { stlStock = 0 })
# cat("04")
tryCatch({   tsStocktrend2 = stlStock$time.series[,2]}, error=function(e) { tsStocktrend2 = 0 })
# cat("05")
tryCatch({   HWStock1_ng = HoltWinters(tsStocktrend1,gamma=FALSE)}, error=function(e) { HWStock1_ng = 0 })
# cat("06")
tryCatch({   HWStock1 = HoltWinters(tsStocktrend1)}, error=function(e) { HWStock1 = 0 })
# cat("07")
tryCatch({   NETfit1 <- nnetar(tsStocktrend1)}, error=function(e) { NETfit1 = 0 })
# cat("08")
# tryCatch({   autofit1 =  auto.arima(tsStocktrend1)}, error=function(e) { autofit1 = 0 })
# cat("09")
tryCatch({   fit12 <-   arima(tsStocktrend1, order=c(1,0,0), list(order=c(2,1,0), period=12))}, error=function(e) { fit12 = 0 })
# cat("010")
tryCatch({   fitl1 <- tslm(tsStocktrend1 ~ trend + season, lambda=0)}, error=function(e) { fitl1 = 0 })
# cat("011")
tryCatch({   stlStock1 = stl(tsStocktrend1,s.window="periodic")}, error=function(e) { stlStock1 = 0 })
# cat("012")
tryCatch({  HWStock2_ng = HoltWinters(tsStocktrend2,gamma=FALSE)}, error=function(e) { HWStock2_ng = 0 })
# cat("013")
tryCatch({   HWStock2 = HoltWinters(tsStocktrend2)}, error=function(e) { HWStock2 = 0 })
# cat("014")
tryCatch({   NETfit2 <- nnetar(tsStocktrend2)}, error=function(e) { NETfit2 = 0 })
# cat("015")
#  tryCatch({   autofit2 =  auto.arima(tsStocktrend2) }, error=function(e) { autofit2 = 0 })
# cat("016")
tryCatch({   fit2 <-    arima(tsStocktrend2, order=c(15,3,3))}, error=function(e) { fit2 = 0 })
# cat("017")
tryCatch({   fit22 <-    arima(tsStocktrend2, order=c(1,0,0), list(order=c(2,1,0), period=12))}, error=function(e) { fit22 = 0 })
# cat("018")
tryCatch({   fitl2 <- tslm(tsStocktrend2 ~ trend + season, lambda=0)}, error=function(e) { fitl2 = 0 })
# cat("019")
tryCatch({   stlStock2 = stl(tsStocktrend1,s.window="periodic")}, error=function(e) { stlStock2 = 0 })
# cat("020")
tryCatch({   HWStockr_ng = HoltWinters(train,gamma=FALSE)}, error=function(e) { HWStockr_ng = 0 })
# cat("021")
tryCatch({   HWStockr = HoltWinters(train)}, error=function(e) { HWStockr = 0 })
# cat("022")
tryCatch({   NETfitr <- nnetar(train)}, error=function(e) { NETfitr = 0 })
# cat("023")
# tryCatch({   autofitr = auto.arima(train)}, error=function(e) { autofitr = 0 })
# cat("024")
tryCatch({   fitr <-arima(train, order=c(15,3,3))}, error=function(e) { fitr = 0 })
# cat("025")
tryCatch({   fitr2 <-  arima(train, order=c(1,0,0), list(order=c(2,1,0), period=12))}, error=function(e) { fitr2 = 0 })
# cat("026")
tryCatch({   fitlr <- tslm(train ~ trend + season, lambda=0)}, error=function(e) { fitlr = 0 })
# cat("027")
tryCatch({   stlStockr = stl(train,s.window="periodic")} , error=function(e) {stlStockr = 0 })
# cat("  	TRANSITION		-!!!-")
# cat("1")
tryCatch({   HWStockr_ng = HoltWinters(train,gamma=FALSE)}, error=function(e) { HWStockr_ng = 0 })
# cat("2")
# tryCatch({  predautofitr =   window(forecast(autofitr,h=39)$mean, start=2013)}, error=function(e) { predautofitr = 0 })
# cat("3")
tryCatch({  predfitr =  window(forecast(fitr,h=39)$mean, start=2013)}, error=function(e) { predfitr = 0 })
# cat("4")
tryCatch({  predfitr2  =   window(forecast(fitr2,h=39)$mean, start=2013)}, error=function(e) { predfitr2 = 0 })
# cat("5")
tryCatch({  predNETfitr =  window(forecast(NETfitr,h=39)$mean, start=2013)}, error=function(e) { predNETfitr = 0 })
# cat("6")
tryCatch({  predHWStockr =  window(predict(HWStockr,n.ahead=39), start=2013)}, error=function(e) { predHWStockr = 0 })
# cat("7")
tryCatch({   predHWStockr_ng =  window(predict(HWStockr_ng,n.ahead=39), start=2013)}, error=function(e) { predHWStockr_ng  = 0 })
# cat("8")
#  tryCatch({ predautofit2 =   window(forecast(autofit2,h=39)$mean, start=2013)}, error=function(e) { predautofit2 =0 })
# cat("9")
tryCatch({  predfit12 =  window(forecast(fit12,h=39)$mean, start=2013)}, error=function(e) { predfit12 = 0 })
# cat("10")
tryCatch({   predfit2 = window(forecast(fit2,h=39)$mean, start=2013)}, error=function(e) { predfit2 = 0 })
# cat("11")
tryCatch({ predfit22 =  window(forecast(fit22,h=39)$mean, start=2013)}, error=function(e) { predfit22 = 0 }) # cat("C2")}, error=function(e) { predfit22 = 0 })
# cat("12")
tryCatch({   predstlStock1 = window( forecast(stlStock1, h=39)$mean, start=2013)}, error=function(e) { predstlStock1 = 0 })
# cat("13")
tryCatch({   predstlStock2 =  window(forecast(stlStock2, h=39)$mean, start=2013)}, error=function(e) { predstlStock2 = 0 })
# cat("14")
tryCatch({   predstlStockr =  window(forecast(stlStockr, h=39)$mean, start=2013)}, error=function(e) { predstlStockr = 0 })
# cat("15")
tryCatch({   predNETfit2 =  window(forecast(NETfit2,h=39)$mean, start=2013)}, error=function(e) { predNETfit2 = 0 })
tryCatch({   predHWStock2 =  window(predict(HWStock2,n.ahead=39), start=2013)}, error=function(e) { predHWStock2 = 0 })
tryCatch({   predHWStock2_ng =  window(predict(HWStock2_ng,n.ahead=39), start=2013)}, error=function(e) { predHWStock2_ng = 0 })
#  tryCatch({    predautofit1 =  window(forecast(autofit1,h=39)$mean, start=2013)}, error=function(e) { predautofit1 = 0 })
# cat("after autofit")
tryCatch({   predfitlr = window(forecast(fitlr, h=39)$mean , start=2013)}, error=function(e) { predfitlr = 0 })
tryCatch({   predfitl1 =   window(forecast(fitl1, h=39)$mean, start=2013)}, error=function(e) { predfitl1 = 0 })
tryCatch({   predfitl2 = window(forecast(fitl2, h=39)$mean , start=2013)}, error=function(e) { predfitl2 = 0 })
tryCatch({   predNETfit1 =  window(forecast(NETfit1,h=39)$mean, start=2013)}, error=function(e) { predNETfit1 = 0 })
tryCatch({   predHWStock1_ng =  window(predict(HWStock1_ng,n.ahead=39), start=2013)}, error=function(e) { predHWStock1_ng = 0 })
tryCatch({   predHWStock11 =  window(predict(HWStock1, n.ahead = 39, prediction.interval = T, level = 0.95)[,1], start=2013)}, error=function(e) { predHWStock11 = 0 })
tryCatch({   predHWStock12 =  window(predict(HWStock1, n.ahead = 39, prediction.interval = T, level = 0.95)[,2], start=2013)}, error=function(e) { predHWStock12 = 0 })
tryCatch({   predHWStock13 =  window(predict(HWStock1, n.ahead = 39, prediction.interval = T, level = 0.95)[,3], start=2013)}, error=function(e) { predHWStock13 = 0 })
# cat("  	NEXT	--!!!--")
# Calculate Mean Absolute Error
for(i in 1:length(test))
{
#  mae[1,i] <- abs <- abs(predautofitr[i]-test[i])
tryCatch({    mae[2,i] <-abs(predfitr[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[3,i] <- abs <- abs(predfitr2[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[4,i] <- abs(predNETfitr[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[5,i] <- abs(predHWStockr[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[6,i] <- abs(predHWStockr_ng[i]-test[i]) }, error=function(e) { })
#    mae[7,i] <- abs(predautofit2[i]-test[i])
tryCatch({    mae[8,i] <- abs(predfit12[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[9,i] <-abs(predfit2[i]-test[i]) }, error=function(e) { })
# cat("before mae 22")
tryCatch({   mae[10,i] <- abs(predfit22[i]-test[i]) }, error=function(e) { })
# cat("after mae 22")
tryCatch({ 	mae[11,i] <- abs(predstlStock1[i]-test[i]) }, error=function(e) { })
tryCatch({     mae[12,i] <- abs(predstlStock2[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[13,i] <- abs(predstlStockr[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[14,i] <- abs(predNETfit2[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[15,i] <- abs(predHWStock2[i]-test[i]) }, error=function(e) { })
tryCatch({     mae[16,i] <- abs(predHWStock2_ng[i]-test[i]) }, error=function(e) { })
#   mae[17,i] <- abs(predautofit1[i]-test[i])
tryCatch({    mae[18,i] <- abs(predfitlr[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[19,i] <-  abs(predfitl1[i]-test[i]) }, error=function(e) { })
tryCatch({   mae[20,i] <- abs(predfitl2[i]-test[i]) }, error=function(e) { })
tryCatch({   mae[21,i] <- abs(predHWStock1_ng[i]-test[i] ) }, error=function(e) { })
tryCatch({    mae[22,i] <- abs(predNETfit1[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[23,i] <- abs(predHWStock11[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[24,i] <- abs(predHWStock12[i]-test[i]) }, error=function(e) { })
tryCatch({    mae[25,i] <- abs(predHWStock13[i]-test[i]) }, error=function(e) { })
}
# Sum all Errors
for(i in 1:25)
{
mae[i,5] = sum(mae[i,1:4])
}
# Find best Prediction
best = which.min(mae[1:25,5])
cat(" - winning model ID:", best )
return (best)
}
system("Documents/r-stockPrediction/input/getStock.sh")
install.packages('quantmod')
library(quantmod)
getSymbols("penis")
getSymbols("404")
getSymbols("penisland.net")
getSymbols("mattsucksmynips")
getSymbols("AAPL", src='yahoo')
head('AAPL')
head(test-vector)
getSymbols((c('QQQ'), src='yahoo')
getSymbols(c('QQQ'), src='yahoo')
View(QQQ)
getSymbols(c('AAPL'), src='yahoo')
View(AAPL)
addSMA(stock, n=200)
SMA(AAPL, 200)
SMA('AAPL', 200)
SMA(AAPL, 10)
SMA(AAPL$AAPL.Close, 10)
SMA(AAPL$AAPL.Close, 200)
chartSeries(IBEX, theme="white", TA="addSMA(100)")
chartSeries(AAPL, theme="white", TA="addSMA(100)")
chartSeries(AAPL, theme="white", TA="addSMA(200)")
chartSeries(AAPL$AAPL.Close, theme="white", TA="addEMA(50,
col='black');addEMA(200, col='blue')")
getSymbols(c('CAT'), src='yahoo')
chartSeries(CAT$CAT.Close, theme="white", TA="addEMA(50,
col='black');addEMA(200, col='blue')")
chartSeries(REXX$REXX.Close, theme="white", TA="addEMA(50,
col='black');addEMA(200, col='blue')")
install.packages('quantmod')
chartSeries(CAT$CAT.Close, theme="white", TA="addEMA(50,
col='black');addEMA(200, col='blue')")
library(quantmod:::chartSeries.chob)
getSymbols(c('CAT'), src='yahoo')
chartSeries(CAT$CAT.Close, theme="white", TA="addEMA(50,
col='black');addEMA(200, col='blue')")
quantmod
install.packages('quantmod')
getSymbols('AAPL', src='yahoo')
library(quantmod)
install.packages(xts)
update.packages()
View(AAPL)
View(AAPL)
View(CAT)
View(QQQ)
library(quantmod:::chartSeries.chob)
library(quantmod)
getSymbols(c('CAT'), src='yahoo')
View(CAT)
chartSeries(AAPL$AAPL.Close, theme="white", TA="addEMA(50,
col='black');addEMA(200, col='blue')")
getSymbols(c('^AAPL'), src='yahoo')
getSymbols('^AAPL', src='yahoo')
library(quantmod)
library(TTR)
getSymbols('^AAPL', src='FRED')
getSymbols('^AAPL', src='google')
getSymbols('^AAPL', src='yahoo')
getSymbols('AAPL', src='yahoo')
head(AAPL)
tail(AAPL)
chartSeries(AAPL, theme='white')
addSMA(n=200)
addSMA(n=10)
addSMA(n=200)
chartSeries(AAPL, theme='white', TA='addVo();addBBans();addCCI();', subset='2015')
chartSeries(AAPL, theme='white', TA='addVo();addBBands();addCCI();', subset='2015')
print('Go Long')
chartSeries(CAT, theme='white')
chartSeries(CAT, theme='white', TA='addVo();addBBands();addCCI();', subset='2015')
getSymbols('CAT', src='yahoo')
chartSeries(CAT, theme='white')
print('Its whatever')
print(EMA20, EMA200)
print(EMA20)
print(toString(EMA20))
EMA200
if(EMA20 < EMA200) {
print('Go Short')
}
chartSeries(CAT, theme='white', addEMA(n=200))
chartSeries(CAT, theme='white', TA='addEMA(200);addEMA(20)')
plot(addEMA(20))
addTA(CAT.EMA.20, on=1, col = "red")
addTA(CAT.EMA.20, on=1, col = "red")
exists('CAT.EMA.20')
exists(CAT)
EMA(CAT$CAT.Close, n=200)
chartSeries(CAT, theme='white')
head(CAT)
head(AAPL)
getSymbols('^IBEX', src='yahoo')
head(IBEX)
EMA(IBEX$IBEX.Close, n=200)
if(EMA(IBEX$IBEX.Close, n=200) > EMA(IBEX$IBEX.Close, n=20)){
print('Go Short')
}
exists(EMA200)
exists(EMA200)
exists(EMA200)
exist(EMA200)
exists(EMA200)
EMA200
EMA(IBEX$IBEX.Close, n=200) > EMA(IBEX$IBEX.Close, n=20)
library(quantmod)
library(TTR)
getSymbols('^IBEX', src='yahoo')
EMA(IBEX$IBEX.Close, n=200) > EMA(IBEX$IBEX.Close, n=20)
addSMA(IBEX, n=200)
head(IBEX)
tail(IBEX)
mean(sum(EMA(IBEX, n=200)))
mean(sum(EMA(IBEX$IBEX.Close, n=200)))
str(EMA(IBEX$IBEX.Close, n=200))
str(EMA(IBEX$IBEX.Close, n=200)[1,])
EMA(IBEX$IBEX.Close, n=200)[1,]
EMA(IBEX$IBEX.Close, n=200)[200,]
chartSeries(IBEX$IBEX.Close, theme='white',
TA="addEMA(50, col='blue');addEMA(200, col='red')")
print("Hello World!")
View(IBEX)
#Data Preprocessing
#import dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
load("~/Documents/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data.csv")
setwd("~/Documents/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
#Data Preprocessing
#import dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
View(dataset)
#Data Preprocessing
#import dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
View(dataset)
install.packages('caTools')
library("caTools", lib.loc="~/anaconda3/lib/R/library")
library(caTools)
source('~/data_preprocessing_template.R')
#Feature scaling
training_set = scale(training_set)
test_set = scale(test_set)
#Feature scaling
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
View(training_set)
View(training_set)
View(test_set)
View(test_set)
